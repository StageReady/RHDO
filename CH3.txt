CH3

Style:

oc run RESOURCE/NAME --image IMAGE [options]

oc run RESOURCE/NAME --image IMAGE --command -- cmd arg1 ... argN

kubectl run RESOURCE/NAME --image IMAGE -- arg1 arg2 ... argN

kubectl run web-server --image registry.access.redhat.com/ubi8/httpd-24

oc run -it my-app --image registry.access.redhat.com/ubi9/ubi --command -- /bin/bash

oc run -it my-app --image registry.access.redhat.com/ubi9/ubi --restart Never/Always/OnFailure --command -- date

run -it my-app --rm --image registry.access.redhat.com/ubi9/ubi --restart Never --command -- date

oc run mysql --image registry.redhat.io/rhel9/mysql-80 --env MYSQL_ROOT_PASSWORD=myP@$$123

oc describe project my-app

oc exec my-app -- date

kubectl exec my-app -c ruby-container -- date

oc exec my-app -c ruby-container -it -- bash -il

kubectl exec my-app -c ruby-container -it -- bash -il

logs pod pod-name ->  -l or --selector=''  /  --tail=  /  -c or --container=  /  -f or --follow  /  -p or --previous=true 

oc logs postgresql-1-jw89j --tail=10

oc attach my-app -it

You can also retrieve logs from the web console by clicking the Logs tab of any pod.

oc delete pod php-app

kubectl delete pod -l app=my-app

oc delete pod -f ~/php-app.json

cat ~/php-app.json | kubectl delete -f -

oc delete pod php-app --grace-period=10

oc delete pod php-app --now

kubectl delete pod php-app --force

kubectl delete pods --all

oc delete project my-app

The crictl command includes several subcommands to help you to manage containers.

crictl pods
Lists all pods on a node.

crictl image
Lists all images on a node.

crictl inspect
Retrieve the status of one or more containers.

crictl exec
Run a command in a running container.

crictl logs
Retrieve the logs of a container.

crictl ps
List running containers on a node.

kubectl get pods -o wide

oc get pod postgresql-1-8lzf2 -o jsonpath='{.spec.nodeName}{"\n"}'

oc debug node/master01

crictl ps --name postgresql

crictl ps --name postgresql -o json | jq .containers[0].id

crictl inspect -o json 27943ae4f3024 | jq .info.pid

crictl inspect 27943ae4f3024 | grep pid

lsns -p 43453

nsenter -t 43453 -p -r ps -ef

nsenter -t 43453 -a ps -ef

--------------------------------------------------------------------------------------------------------------

lab start pods-containers

oc login -u developer -p developer https://api.ocp4.example.com:6443

oc new-project pods-containers

oc describe project pods-containers

oc run -it ubi9-user --restart 'Never' --image registry.ocp4.example.com:8443/ubi9/ubi -- /bin/bash -c "whoami && id"

oc delete pod ubi9-user

oc login -u admin -p redhatocp

oc run -it ubi9-user --restart 'Never' --image registry.ocp4.example.com:8443/ubi9/ubi -- /bin/bash -c "whoami && id"

oc delete pod ubi9-user

oc login -u developer -p developer

oc run ubi9-date --restart 'Never' --image registry.ocp4.example.com:8443/ubi9/ubi -- date

oc logs ubi9-date

oc delete pod ubi9-date

oc run ubi9-command -it --image registry.ocp4.example.com:8443/ubi9/ubi -- /bin/bash

exit

oc logs ubi9-command

oc attach ubi9-command -it

while true; do echo $(date); sleep 2; done

oc logs ubi9-command --tail=10

oc get pod ubi9-command -o json | jq .status.containerStatuses[].name

oc get pods ubi9-command -o wide

oc debug node/master01

oc login -u admin -p redhatocp

oc debug node/master01

crictl ps --name ubi9-command -o json | jq -r .containers[0].id

CID=$(crictl ps --name ubi9-command -o json | jq -r .containers[0].id)

echo $CID

crictl inspect $CID | grep pid

PID=365297

lsns -p $PID

cat /etc/redhat-release

crictl exec -it $CID cat /etc/redhat-release

ldd --version

crictl exec -it $CID ldd --version

exit 

exit 

exit 

oc get pods

--------------------------------------------------------------------------------------------------------------

registry.access.redhat.com (authentication is required)

registry.redhat.io (authentication is required)

https://catalog.redhat.com/, provides centralized searching utility for both registries.

https://catalog.redhat.com/software/containers/explore to specifically search for container images.

Registry
It is a content server, such as registry.access.redhat.com, that is used to store and share container images. A registry consists of one or more repositories that contain tagged container images.

Name
It identifies the container image repository; it is a string that is composed of letters, numbers, and some special characters.
Example: registry.access.redhat.com/ubi9/httpd-24:1-233 container image.

ID/Hash
It is the SHA (Secure Hash Algorithm) code to pull or verify an image. The SHA image ID cannot change, and always references the same container image content. 
Example, the sha256:4186a1ead13fc30796f951694c494e7630b82c320b81e20c020b3b07c888985b image ID always refers to the registry.access.redhat.com/ubi9/httpd-24:1-233 container image.

Tag
It is a label for a container image in a repository, to distinguish from other images, for version control. The tag comes after the image repository name and is delimited by a colon (:).
When an image tag is omitted, the floating tag, latest, is used as the default tag.

sudo dnf -y install skopeo

skopeo login quay.io

skopeo list-tags docker://registry.access.redhat.com/ubi9/httpd-24

skopeo inspect --config docker://registry.access.redhat.com/ubi9/httpd-24

skopeo copy docker://quay.io/skopeo/stable:latest docker://registry.example.com/skopeo:latest

skopeo delete docker://registry.example.com/skopeo:latest

skopeo sync --src docker --dest docker registry.access.redhat.com/ubi8/httpd-24 registry.example.com/httpd-24

skopeo inspect docker://registry.redhat.io/rhel8/httpd-24

skopeo inspect docker://registry.access.redhat.com/ubi8:latest

skopeo login registry.redhat.io

cat ${XDG_RUNTIME_DIR}/containers/auth.json

oc image info registry.access.redhat.com/ubi9/httpd-24:1-233 --filter-by-os amd64

The oc image command provides more options to manage container images.

oc image append
Add layers to container images, and then push the container image to a registry.

oc image extract
Extract or copy files from a container image to a local disk. Use this command to access the contents of a container image without first running the image as a container.

oc image mirror
Copy or mirror container images from one container registry or repository to another. 

--------------------------------------------------------------------------------------------------------------

lab start pods-images

oc login -u developer -p developer https://api.ocp4.example.com:6443

oc new-project pods-images

skopeo login registry.ocp4.example.com:8443
Username: developer
Password: developer

skopeo list-tags docker://registry.ocp4.example.com:8443/redhattraining/docker-nginx

oc run docker-nginx --image registry.ocp4.example.com:8443/redhattraining/docker-nginx:1.23

oc get pods

oc logs docker-nginx

oc debug pod/docker-nginx

ls -la /etc/ | grep nginx

ls -la /var/cache | grep nginx

whoami

exit

skopeo inspect --config docker://registry.ocp4.example.com:8443/redhattraining/docker-nginx:1.23

oc delete pod docker-nginx

skopeo list-tags docker://registry.ocp4.example.com:8443/redhattraining/bitnami-mysql

skopeo inspect --config docker://registry.ocp4.example.com:8443/redhattraining/bitnami-mysql:8.0.31

oc run bitnami-mysql --image registry.ocp4.example.com:8443/redhattraining/bitnami-mysql:8.0.31

oc get pods

oc logs bitnami-mysql

oc delete pod bitnami-mysql

oc run bitnami-mysql --image registry.ocp4.example.com:8443/redhattraining/bitnami-mysql:8.0.31 --env MYSQL_ROOT_PASSWORD=redhat123

oc get pods

oc exec -it bitnami-mysql -- /bin/bash -c "whoami && id"

oc describe project pods-images

skopeo list-tags docker://registry.ocp4.example.com:8443/rhel9/mysql-80

skopeo inspect docker://registry.ocp4.example.com:8443/rhel9/mysql-80:latest

skopeo inspect --format "Name: {{.Name}}\n Digest: {{.Digest}}\n Release: {{.Labels.release}}" docker://registry.ocp4.example.com:8443/rhel9/mysql-80:latest

skopeo inspect --format "Name: {{.Name}}\n Digest: {{.Digest}}\n Release: {{.Labels.release}}" docker://registry.ocp4.example.com:8443/rhel9/mysql-80:1

skopeo inspect --format "Name: {{.Name}}\n Digest: {{.Digest}}\n Release: {{.Labels.release}}" docker://registry.ocp4.example.com:8443/rhel9/mysql-80:1-237

oc run rhel9-mysql --image registry.ocp4.example.com:8443/rhel9/mysql-80:1-237

oc get pods

oc logs rhel9-mysql

oc delete pod rhel9-mysql

oc run rhel9-mysql --image registry.ocp4.example.com:8443/rhel9/mysql-80:1-237 --env MYSQL_USER=redhat --env MYSQL_PASSWORD=redhat123 --env MYSQL_DATABASE=worldx

oc get pods

oc logs rhel9-mysql

oc image info registry.ocp4.example.com:8443/rhel9/mysql-80:1-237

oc exec -it rhel9-mysql -- ls -la /var/lib/mysql

oc exec -it rhel9-mysql -- ls -la /var/lib/mysql/data | grep worldx

oc get pods rhel9-mysql -o json | jq .status.podIP

oc run mysqlclient --image registry.ocp4.example.com:8443/rhel9/mysql-80:1-237 --env MYSQL_ROOT_PASSWORD=redhat123

oc get pods

oc exec -it mysqlclient -- mysqlshow -u redhat -p -h 10.8.0.109
Enter password: redhat123

lab finish pods-images

--------------------------------------------------------------------------------------------------------------

The kubectl CLI provides the following commands:

kubectl describe: Display the details of a resource.

kubectl edit: Edit a resource configuration by using the system editor.

kubectl patch: Update a specific attribute or field for a resource.

kubectl replace: Deploy a new instance of the resource.

kubectl cp: Copy files and directories to and from containers.

kubectl exec: Execute a command within a specified container.

kubectl explain: Display documentation for a specified resource.

kubectl port-forward: Configure a port forwarder for a specified container.

kubectl logs: Retrieve the logs for a specified container.

The oc CLI provides the following commands:

oc status: Display the status of the containers in the selected namespace.

oc rsync: Synchronize files and directories to and from containers.

oc rsh: Start a remote shell within a specified container.

oc describe pod dns-default-lt13h

oc edit pod mongo-app-sw88b

oc patch pod valid-pod --type='json' -p='[{"op": "replace", "path": "/spec/containers/0/image", "value":"http://registry.access.redhat.com/ubi8/httpd-24"}]'

oc cp apache-app-kc82c:/var/www/html/index.html /tmp/index.bak

ls /tmp

oc cp /tmp/index.html apache-app-kc82c:/var/www/html/

oc exec -it apache-app-kc82c -- ls /var/www/html

oc rsync apache-app-kc82c:/var/www/ /tmp/web_files

ls /tmp/web_files

oc port-forward nginx-app-cc78k 8080:80

oc rsh tomcat-app-jw53r

You can also connect to running containers from the web console by clicking the Terminal tab in the pod's principal menu.

EXAMPLE:
oc exec POD | TYPE/NAME [-c container_name] -- COMMAND [arg1 ... argN]

oc exec -it mariadb-lc78h -- ls /

oc exec mariadb-lc78h -- ls /

oc logs BIND9-app-rw43j

oc get events

--------------------------------------------------------------------------------------------------------------

lab start pods-troubleshooting

oc login -u developer -p developer https://api.ocp4.example.com:6443

oc new-project pods-troubleshooting

oc run mysql-server --image registry.ocp4.example.com:8443/rhel9/mysql-80:1228 --env MYSQL_USER=redhat --env MYSQL_PASSWORD=redhat123 --env MYSQL_DATABASE=world

oc get pods

oc logs mysql-server

oc get events

skopeo login registry.ocp4.example.com:8443
Username: developer
Password: developer

skopeo inspect docker://registry.ocp4.example.com:8443/rhel9/mysql-80

oc edit pod/mysql-server

oc get pods

oc cp ~/DO180/labs/pods-troubleshooting/world_x.sql mysql-server:/tmp/

oc exec -it pod/mysql-server -- ls -la /tmp/

oc rsh mysql-server

mysql -u redhat -p
Enter password: redhat123

USE world;

SOURCE /tmp/world_x.sql;

SHOW TABLES;

exit;

exit

oc port-forward mysql-server 3306:3306

mysql -u redhat -p -h 127.0.0.1 -P 3306
Enter password: redhat123

USE world;

SHOW TABLES;

SELECT COUNT(*) FROM country;

exit;

oc port-forward mysql-server 3306:3306

lab finish pods-troubleshooting

--------------------------------------------------------------------------------------------------------------

https://rha.ole.redhat.com/rha/app/courses/do180-4.14/pages/ch03s07/afc13612-c35a-47ee-be67-d71e1f05fb37

--------------------------------------------------------------------------------------------------------------